import libs = libthrift%lib{thrift}
import! [metadata] thrift = thrift%exe{thrift}

define [see_through] thrift_cxx: group
define thrift: file
thrift{*}: extension = thrift

exe{hello-thrift}: {hxx cxx}{** -gen-cpp/*} \
                   thrift_cxx{ThriftTest EnumTest} \
                   $libs testscript

thrift_cxx{ThriftTest}: thrift{ThriftTest}
thrift_cxx{EnumTest}: thrift{EnumTest}

cxx.poptions =+ "-I$out_root" "-I$src_root" "-I$out_base" "-I$src_base"

# Note that the Thrift's way is to place the generated files into the gen-cpp/
# subdirectory of the output directory. Seeing that there is no predictability
# in the generated file names (no, they don't alwasy start with the input file
# base), this is probably for the best. So we roll with that.
#
# Note also that this rule has no problem compiling multiple .thrift files
# into the same gen-cpp/ subdirectory provided they don't clobber each other's
# generated files.
#
[rule_name=thrift_compile_cxx] thrift_cxx{~'/(.+)/'}: thrift{~'/\1/'} $thrift
{{
   o = $directory($>[0])             # Target output directory.
   s = $path($<[0])                  # Source file.
   t = $o/$name($>[0]).thrift_cxx.t  # Temp dir (based on group name).
   d = $t/$name($<[0]).d             # Dep file (target list).

   thrift_options = --nowarn --gen cpp:no_skeleton

   # Describe the dynamic targets for better diagnostics, for example:
   #
   # error: mapping of generated thrift target path SecondService.h to target type is ambiguous
   #
   # Instead of:
   #
   # error: mapping of file target path SecondService.h to target type is ambiguous
   #
   dyndep_options = --target-what 'generated thrift'

   # Explicitly map generated files to hxx{}/cxx{} target types. This serves
   # two purposes: It resolves the ambiguity between h{} and hxx{} for headers
   # (since they both use the .h extension). It also makes sure the generated
   # files are mapped to these targets even if the project uses extensions
   # other than .h/.cpp (it doesn't look like there is a way to customize
   # the extensions in Thrift).
   #
   dyndep_options += --target-extension-type h=hxx
   dyndep_options += --target-extension-type cpp=cxx

   # Thrift doesn't provide any way to list the would-be-generated files so
   # the best we can do is to generate them, get their list, and throw them
   # away. Also note that there is likewise no way to list included files, so
   # one has to track this manually.
   #
   # Here is the line-by-line description of what's going on:
   #
   # - depdb dyndep --dyn-target $dyndep_options --format lines --file $d
   #
   #   The dynamic dependency extraction builtin call. The --dyn-target option
   #   instructs it to extract dynamic targets. The --format=lines option
   #   tells it that the targets will be listed one per line.  The --file
   #   option tells it to read the dependency information (the list of
   #   targets) from the $d file that will be produced by the rest of
   #   the lines in the command line.
   #
   # - mkdir -p $t
   #
   #   Create the temporary directory. At the end of the command line, it will
   #   be automatically cleaned up.
   #
   # - $thrift -o $t $thrift_options $s &$t/gen-cpp/***
   #
   #   Generate the files placing them into gen-cpp/ subdirectory of the
   #   temporary directory $t. The &$t/gen-cpp/*** part is the cleanup
   #   that will remove $t/gen-cpp/ recursively.
   #
   # - find $t/gen-cpp -type f >$d
   #
   #   The find builtin lists all the files in the $t/gen-cpp directory
   #   and writes this list to $d.
   #
   # - sed -e "s%[/\\\\]$path.leaf($t)%%g" -i $d
   #
   #   The list of files produced by the find builtin will be in $t and thus
   #   contain the temporary directory while the actual files that will be
   #   generated by the recipe body will be in $o. So this sed script removed
   #   the temporary directory component from each path in $d.
   #
   # - echo '' >>$d
   #
   #   Write a blank line to $d that separates dynamic targets from dynamic
   #   prerequisites in the `lines` dependency format.
   #
   # - echo $path.representation([dir_path] $o/gen-cpp) >>$d
   #
   #   Write an fsdir{} dynamic prerequisite to $d that corresponds to the
   #   gen-cpp/ subdirectory. This makes sure this subdirectory is
   #   automatically created on update and removed on clean.
   #
   # Note that if you need to debug the dyndep command line and would like
   # to see the contents of $d, you can disable its cleanup by specifying
   # &!$d at the end of the command line. For example:
   #
   # echo $path.representation([dir_path] $o/gen-cpp) >>$d  &!$d
   #
   depdb dyndep --dyn-target $dyndep_options --format lines --file $d -- \
     mkdir -p $t                                                      && \
     $thrift -o $t $thrift_options $s &$t/gen-cpp/***                 && \
     find $t/gen-cpp -type f                           >$d            && \
     sed -e "s%[/\\\\]$path.leaf($t)%%g"             -i $d            && \
     echo ''                                          >>$d            && \
     echo $path.representation([dir_path] $o/gen-cpp) >>$d

   $thrift -o $o $thrift_options $s

   # Thrift is trying to be clever and avoid modifying the existing generated
   # files if nothing changes. This messes up with our mtime-based change
   # tracking so we fix it by making sure each generated file is older than
   # the source.
   #
   for i: $integer_sequence(1, $size($>))
     touch --after $s $path($>[$i])
   end
}}
